name: Deploy DEV Infrastructure

on:
  push:
    branches:
      - develop
  workflow_dispatch:

permissions:
  contents: write

jobs:
  terraform-dev:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform/environments/dev

    env:
      IMAGE_NAME: fastapi-env-info
      REGION: europe-west1  # adapte selon ton besoin
      PROJECT_ID: projet-pipeline  # adapte selon ton projet

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Verify Docker version
        run: docker --version

      - name: Verify gcloud version
        run: gcloud --version

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Setup Google Cloud auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Docker buildx for multi-arch support
        uses: docker/setup-buildx-action@v3

      - name: Auth Docker to GCR
        run: |
          gcloud auth configure-docker europe-west1-docker.pkg.dev --quiet

      - name: List existing git tags
        run: git tag --list "dev-v*"

      - name: Get latest dev tag
        id: get_tag
        run: |
          latest=$(git tag --list "dev-v*" --sort=-v:refname | head -n 1)
          echo "latest=$latest" >> "$GITHUB_OUTPUT"

      - name: Bump tag version
        id: bump_tag
        run: |
          latest=${{ steps.get_tag.outputs.latest }}
          if [ -z "$latest" ]; then
            new_tag="dev-v0.1.0"
          else
            version=${latest#dev-v}
            major=$(echo $version | cut -d. -f1)
            minor=$(echo $version | cut -d. -f2)
            patch=$(echo $version | cut -d. -f3)
            new_patch=$((patch + 1))
            new_tag="dev-v$major.$minor.$new_patch"
          fi
          echo "new_tag=$new_tag" >> "$GITHUB_OUTPUT"
          echo "New tag will be $new_tag"

      - name: Build & Push Docker Image
        working-directory: ./  # retour racine pour Dockerfile
        run: |
          docker build \
            --build-arg ENV=dev \
            --build-arg VERSION=${{ steps.bump_tag.outputs.new_tag }} \
            --build-arg COMMIT=$(git rev-parse --short HEAD) \
            --build-arg BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ) \
            -t europe-west1-docker.pkg.dev/${{ env.PROJECT_ID }}/default/${{ env.IMAGE_NAME }}:${{ steps.bump_tag.outputs.new_tag }} \
            .
          docker images europe-west1-docker.pkg.dev/${{ env.PROJECT_ID }}/default/${{ env.IMAGE_NAME }}
          docker push europe-west1-docker.pkg.dev/${{ env.PROJECT_ID }}/default/${{ env.IMAGE_NAME }}:${{ steps.bump_tag.outputs.new_tag }}

      - name: Validate Docker image pushed to GCR
        run: |
          gcloud container images list-tags europe-west1-docker.pkg.dev/${{ env.PROJECT_ID }}/default/${{ env.IMAGE_NAME }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -var-file=terraform.tfvars

      - name: Terraform Apply
        run: terraform apply -var-file=terraform.tfvars -auto-approve

      - name: Create Git tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git tag ${{ steps.bump_tag.outputs.new_tag }}
          git push origin ${{ steps.bump_tag.outputs.new_tag }}

      - name: Docker system prune (cleanup unused data)
        if: success()
        run: |
          docker system prune -af || true

      - name: Deploy Prometheus & Grafana to VM
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VM_IP }}
          username: ${{ secrets.VM_SSH_USER || 'ubuntu' }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            echo "Docker version:"
            docker --version
            echo "Docker Compose version:"
            docker-compose --version
            
            rm -rf monitoring
            git clone https://github.com/${{ github.repository }}.git
            cd $(basename ${{ github.repository }})
            cd monitoring
            docker-compose down || true
            docker-compose up -d
