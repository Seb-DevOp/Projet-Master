name: Deploy Infrastructure + App to GCP

on:
  push:
    branches:
      - main
  workflow_dispatch:   # Permet de lancer manuellement (ex: pour apply après validation)

jobs:
  terraform-deploy:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform/environments/prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Setup Google Cloud auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -var-file=terraform.tfvars -out=tfplan.out -detailed-exitcode || echo $? > plan_exit_code.txt
          echo "::set-output name=exit_code::$(cat plan_exit_code.txt || echo 0)"

      - name: Terraform Apply (auto uniquement si aucun changement détecté)
        if: steps.plan.outputs.exit_code == '0' || github.event_name == 'workflow_dispatch'
        run: terraform apply -var-file=terraform.tfvars -auto-approve

      # Reste des étapes (ex: outputs, ssh, deploy docker) conditionné à apply effectif
      - name: Output public IP
        if: steps.plan.outputs.exit_code == '0' || github.event_name == 'workflow_dispatch'
        run: terraform output -raw public_ip

      - name: Get VM IP
        if: steps.plan.outputs.exit_code == '0' || github.event_name == 'workflow_dispatch'
        id: get_ip
        run: echo "VM_IP=$(terraform output -raw public_ip)" >> $GITHUB_ENV

      - name: Generate SSH key
        if: steps.plan.outputs.exit_code == '0' || github.event_name == 'workflow_dispatch'
        run: |
          ssh-keygen -t rsa -b 4096 -f temp-ssh-key -N ""
          echo "SSH_PRIVATE_KEY<<EOF" >> $GITHUB_ENV
          cat temp-ssh-key >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "SSH_PUBLIC_KEY=$(cat temp-ssh-key.pub)" >> $GITHUB_ENV

      - name: Inject SSH public key in VM with Terraform
        if: steps.plan.outputs.exit_code == '0' || github.event_name == 'workflow_dispatch'
        run: echo "public_ssh_key = \"${{ env.SSH_PUBLIC_KEY }}\"" > temp-auto.tfvars

      - name: Re-apply Terraform with public key
        if: steps.plan.outputs.exit_code == '0' || github.event_name == 'workflow_dispatch'
        run: terraform apply -var-file=terraform.tfvars -var-file=temp-auto.tfvars -auto-approve

